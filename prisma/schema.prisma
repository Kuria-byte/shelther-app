datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL") // Uses the same URL for direct connections
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  phoneNumber       String?            @unique
  phoneVerified     Boolean?           @default(false)
  onboardingStatus  Int                @default(0)
  accounts          Account[]
  sessions          Session[]
  emergencyContacts EmergencyContact[]
  safetyProfiles    SafetyProfile[]
  journeys          Journey[]
  alerts            Alert[]
  checkIns          CheckIn[]
  safetyReports     SafetyReport[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Shelther-specific Models
model EmergencyContact {
  id          String   @id @default(cuid())
  userId      String
  name        String
  phoneNumber String
  email       String?
  relation    String?
  priority    Int
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SafetyProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  homeAddress       String?
  workAddress       String?
  medicalConditions String?
  bloodType         String?
  allergies         String?
  medications       String?
  emergencyNotes    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journey {
  id            String    @id @default(cuid())
  userId        String
  startTime     DateTime
  endTime       DateTime?
  startLocation Json
  destination   Json
  status        String    @default("active")
  checkPoints   Json[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Alert {
  id         String    @id @default(cuid())
  userId     String
  type       String
  location   Json
  status     String
  details    Json?
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CheckIn {
  id           String    @id @default(cuid())
  userId       String
  scheduledFor DateTime
  completed    Boolean   @default(false)
  completedAt  DateTime?
  location     Json?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SafetyReport {
  id          String   @id @default(cuid())
  userId      String
  location    Json
  type        String
  description String
  severity    String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
